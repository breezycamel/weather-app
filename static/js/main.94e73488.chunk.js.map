{"version":3,"sources":["util/util.js","components/CurrentPanel.js","components/DailyCard.js","components/DailyPanel.js","components/HourlyCard.js","components/HourlyPanel.js","components/TopNav.js","components/RecentLocationBar.js","App.js","index.js"],"names":["meterPerSecToMPH","speed","convertKelvinToF","kelvin","convertKelvinToC","CurrentPanel","current","gotCurrent","convert","className","time","moment","parseZone","dt","temp","main","wind","humidity","feelsLike","feels_like","console","log","name","sys","country","format","toFixed","src","weather","icon","alt","DailyCard","data","isSelected","onClick","day","minTemp","min","maxTemp","max","DailyPanel","daily","gotDaily","useState","curIndex","setCurIndex","date","windSpeed","wind_speed","precipitation","pop","dewPoint","dew_point","replace","uvi","map","i","key","HourlyCard","HourlyPanel","hourly","gotHourly","temperature","hour","TopNav","handleSearch","isCelsius","setIsCelsius","searchKey","setSearchKey","handleOnSwitch","toggle","handleOnClick","id","type","onKeyPress","e","onChange","target","value","RecentLocationBar","recentLocations","deleteRecentLocation","selectRecentLocation","slice","reverse","location","Location","index","lat","lon","App","oneCallAPI_url","setCurrent","setGotCurrent","setDaily","setGotDaily","setHourly","setGotHourly","currentWeatherAPI","setCurrentWeatherAPI","openWeatherAPIKey","process","util","cookie","Cookies","get","setRecentLocations","a","url","fetch","then","res","json","data1","useEffect","navigator","geolocation","getCurrentPosition","searchByCoordinate","coords","latitude","longitude","handleFailure","cod","Error","coord","Date","setFullYear","undefined","set","JSON","stringify","path","expires","filter","loc","Math","abs","length","newLocations","push","splice","addRecentLocation","fetchOneCallData","catch","error","window","alert","message","searchTerms","split","term","trim","isZip","Number","isInteger","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94e73488.chunk.js","sourcesContent":["export function meterPerSecToMPH(speed){\r\n\treturn speed*3600/1609.34;\r\n}\r\n\r\nexport function convertKelvinToF(kelvin){\r\n\treturn (kelvin - 273.15) * 9/5 + 32;\r\n}\r\n\r\nexport function convertKelvinToC(kelvin){\r\n\treturn kelvin - 273.15;\r\n}\r\n","import React from 'react';\r\nimport {meterPerSecToMPH} from '../util/util.js';\r\nimport moment from 'moment';\r\n\r\nexport default function CurrentPanel({current, gotCurrent, convert}) {\r\n\tif(!gotCurrent){\r\n\t\treturn(\r\n\t\t\t<div className='current-panel'>\r\n\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tconst weatherImageURL = 'https://openweathermap.org/img/wn/';\r\n\tconst imageSize = '@2x.png';\r\n\tconst time = moment.parseZone(current.dt*1000);\r\n\tconst temp = convert(current.main.temp);\r\n\tconst wind = meterPerSecToMPH(current.wind.speed);\r\n\tconst humidity = current.main.humidity;\r\n\tconst feelsLike = convert(current.main.feels_like);\r\n\tconsole.log();\r\n\r\n\treturn (\r\n\t\t<div className='panel'>\r\n\t\t\t<h1 className='location-text'>{current.name+', '+current.sys.country}</h1>\r\n\t\t\t<p className='current-date-time'>{time.format('LLLL')}</p>\r\n\r\n\t\t\t<div className='panel-main'>\r\n\t\t\t\t<div className='panel-temperature-containter panel-content'>\r\n\t\t\t\t\t<p className='panel-temperature'>{temp.toFixed(0)+'\\u00B0'}</p>\r\n\t\t\t\t\t<img className='current-weather-icon' src={weatherImageURL+current.weather[0].icon+imageSize} alt={current.weather[0].main}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='panel-weather-info panel-content'>\r\n\t\t\t\t\t<p>Feels Like: {feelsLike.toFixed(0)+'\\u00B0'}</p>\r\n\t\t\t\t\t<p className='wind'>Wind: {wind.toFixed(0)} mph</p>\r\n\t\t\t\t\t<p className='humidity'>Humidity: {humidity}%</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\t\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function DailyCard({data, isSelected, onClick, convert}) {\r\n\tconst weatherImageURL = 'https://openweathermap.org/img/wn/';\r\n\tconst imageSize = '@2x.png';\r\n\tconst day = moment.parseZone(data.dt*1000);\r\n\tconst minTemp = convert(data.temp.min);\r\n\tconst maxTemp = convert(data.temp.max);\r\n\treturn (\r\n\t\t<div className={`card ${(isSelected)? 'selected':''}`} onClick={onClick}>\r\n\t\t\t<p className='daily-card-day'>{day.format('ddd')}</p>\r\n\t\t\t<img className='card-image' src={weatherImageURL+data.weather[0].icon+imageSize} alt={data.weather[0].main}/>\r\n\t\t\t<p className='daily-card-temperature'>{maxTemp.toFixed(0)+'\\u00B0'+' '+minTemp.toFixed(0)+'\\u00B0'}</p>\r\n\t\t</div>\r\n\t);\r\n}","import React, {useState}from 'react';\r\nimport DailyCard from './DailyCard.js';\r\nimport {meterPerSecToMPH} from '../util/util.js';\r\nimport moment from 'moment';\r\n\r\nexport default function DailyPanel({daily, gotDaily, convert}) {\r\n\tconst [curIndex, setCurIndex] = useState(0);\r\n\tif(!gotDaily){\r\n\t\treturn(\r\n\t\t\t<div className='daily-panel'>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tconst minTemp = convert(daily[curIndex].temp.min);\r\n\tconst maxTemp = convert(daily[curIndex].temp.max);\r\n\tconst weatherImageURL = 'https://openweathermap.org/img/wn/{iconid}@2x.png'; \r\n\tconst indexes = [0,1,2,3,4,5,6,7];\r\n\tconst date =  moment.parseZone(daily[curIndex].dt*1000);   \r\n\tconst windSpeed = meterPerSecToMPH(daily[curIndex].wind_speed);\r\n\tconst precipitation = daily[curIndex].pop*100;\r\n\tconst humidity = daily[curIndex].humidity;\r\n\tconst dewPoint = convert(daily[curIndex].dew_point);\r\n\r\n\t//console.log(daily[curIndex]);\r\n\r\n\treturn (\r\n\t\t<div className='panel'>\r\n\t\t\t<h1>Daily Forecast</h1>\r\n\t\t\t<p>{date.format('ll')}</p>\r\n\t\t\t\t\r\n\t\t\t<div className='panel-main'>\r\n\t\t\t\t<div className='panel-temperature-containter panel-content'>\r\n\t\t\t\t\t<p className='panel-temperature'>{maxTemp.toFixed(0)+'\\u00B0'+'/'+minTemp.toFixed(0)+'\\u00B0'}</p>\r\n\t\t\t\t\t<img src={weatherImageURL.replace('{iconid}', daily[curIndex].weather[0].icon)} alt={daily[curIndex].weather[0].main}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='panel-content'>\r\n\t\t\t\t\t<p className='daily-precipitation'>Preciptiation: {precipitation.toFixed(0)}%</p>\r\n\t\t\t\t\t<p className='daily-wind-speed'>Wind Speed: {windSpeed.toFixed(0)}mph</p>\r\n\t\t\t\t\t<p className='daily-humidity'>Humidity: {humidity}%</p>\r\n\t\t\t\t\t<p className='daily-dew-point'>Dew Point: {dewPoint.toFixed(0)+'\\u00B0'}</p>\r\n\t\t\t\t\t<p className='daily-uvi'>UV Index: {daily[curIndex].uvi}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className='daily-card-container'>\r\n\t\t\t\t{indexes.map(i=>(\r\n\t\t\t\t\t<DailyCard\r\n\t\t\t\t\t\tkey = {i}\r\n\t\t\t\t\t\tdata = {daily[i]}\r\n\t\t\t\t\t\tisSelected = {i===curIndex}\r\n\t\t\t\t\t\tonClick={() => setCurIndex(i)}\r\n\t\t\t\t\t\tconvert={convert}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport default function HourlyCard({data, isSelected, onClick, convert}) {\r\n\tconst weatherImageURL = 'https://openweathermap.org/img/wn/';\r\n\tconst imageSize = '@2x.png';\r\n\tconst day = moment.parseZone(data.dt*1000);\r\n\tconst temp = convert(data.temp);\r\n\treturn (\r\n\t\t<div className={`card ${(isSelected)? 'selected':''}`} onClick={onClick}>\r\n\t\t\t<p className='hourly-card-day'>{day.format('ddd')}</p>\r\n\t\t\t<p>{day.format('LT')}</p>\r\n\t\t\t<img className='card-image' src={weatherImageURL+data.weather[0].icon+imageSize} alt={data.weather[0].main}/>\r\n\t\t\t<p className='hourly-card-temperature'>{temp.toFixed(0)+'\\u00B0'}</p>\r\n\t\t</div>\r\n\t);\r\n}","import React, {useState}from 'react';\r\nimport HourlyCard from './HourlyCard.js';\r\nimport {meterPerSecToMPH} from '../util/util.js';\r\nimport moment from 'moment';\r\n\r\nexport default function HourlyPanel({hourly, gotHourly, convert}) {\r\n\tconst [curIndex, setCurIndex] = useState(0);\r\n\tif(!gotHourly){\r\n\t\treturn(\r\n\t\t\t<div className='hourly-panel'>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tconst temperature = convert(hourly[curIndex].temp);\r\n\tconst weatherImageURL = 'https://openweathermap.org/img/wn/{iconid}@2x.png'; \r\n\tconst date =  moment.parseZone(hourly[curIndex].dt*1000);   \r\n\tconst windSpeed = meterPerSecToMPH(hourly[curIndex].wind_speed);\r\n\tconst precipitation = hourly[curIndex].pop*100;\r\n\tconst humidity = hourly[curIndex].humidity;\r\n\tconst dewPoint = convert(hourly[curIndex].dew_point);\r\n\tconst feelsLike = convert(hourly[curIndex].feels_like);\r\n\r\n\treturn (\r\n\t\t<div className='panel'>\r\n\t\t\t<h1>Hourly Forecast</h1>\r\n\t\t\t<p>{date.format('ll')}</p>\r\n\t\t\t<div className='panel-main'>\r\n\t\t\t\t<div className='panel-temperature-containter panel-content'>\r\n\t\t\t\t\t<p className='panel-temperature'>{temperature.toFixed(0)+'\\u00B0'}</p>\r\n\t\t\t\t\t<img src={weatherImageURL.replace('{iconid}', hourly[curIndex].weather[0].icon)} alt={hourly[curIndex].weather[0].main}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='panel-content'>\r\n\t\t\t\t\t<p>Feels Like: {feelsLike.toFixed(0)+'\\u00B0'}</p>\r\n\t\t\t\t\t<p className='hourly-precipitation'>Preciptiation: {precipitation.toFixed(0)}%</p>\r\n\t\t\t\t\t<p className='hourly-wind-speed'>Wind Speed: {windSpeed.toFixed(0)}mph</p>\r\n\t\t\t\t\t<p className='hourly-humidity'>Humidity: {humidity}%</p>\r\n\t\t\t\t\t<p className='hourly-dew-point'>Dew Point: {dewPoint.toFixed(0)+'\\u00B0'}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className='hourly-card-container'>\r\n\t\t\t\t{hourly.map((hour,i)=>(\r\n\t\t\t\t\t<HourlyCard\r\n\t\t\t\t\t\tkey = {i}\r\n\t\t\t\t\t\tdata = {hour}\r\n\t\t\t\t\t\tisSelected = {i===curIndex}\r\n\t\t\t\t\t\tonClick={() => setCurIndex(i)}\r\n\t\t\t\t\t\tconvert={convert}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}","import React, {useState} from 'react';\r\n\r\nexport default function TopNav({handleSearch, isCelsius, setIsCelsius}) {\r\n\tconst [searchKey, setSearchKey] = useState('');\r\n\r\n\t//Handle on seach change\r\n\tfunction onChange(e){\r\n\t\tsetSearchKey(e.target.value);\r\n\t}\r\n\r\n\t//Handle on temperature switch\r\n\tfunction handleOnSwitch(toggle){\r\n\t\tconsole.log(toggle);\r\n\t\tsetIsCelsius(toggle);\r\n\t}\r\n\r\n\t//Handle click event from search button\r\n\tfunction handleOnClick(){\r\n\t\thandleSearch(searchKey);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id='nav'>\r\n\t\t\t<div className='nav-content'>\r\n\t\t\t\t<p id='title'>Weather App</p>\r\n\t\t\t</div>\r\n\t\t\t<div className='nav-content search-bar'>\r\n\t\t\t\t<input type='text' onKeyPress={e=>{if(e.key=='Enter')handleOnClick();}} onChange={e => onChange(e)}/>\r\n\t\t\t\t<button type=\"button\" onClick={handleOnClick}>Search</button>\r\n\t\t\t</div>\r\n\t\t\t<div className='nav-content right'>\r\n\t\t\t\t<div id='conversion-switch'>\r\n\t\t\t\t\t<div id='celsius' className={`conversion-option ${(isCelsius)? 'selected':''}`} onClick={()=>handleOnSwitch(true)}>\r\n\t\t\t\t\t\t{'\\u00B0C'}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id='fahrenheit' className={`conversion-option ${(isCelsius)? '':'selected'}`} onClick={()=>handleOnSwitch(false)}>\r\n\t\t\t\t\t\t{'\\u00B0F'}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react';\r\n\r\nexport default function RecentLocationBar({recentLocations, deleteRecentLocation, selectRecentLocation}) {\r\n\t\r\n\treturn (\r\n\t\t<div id='recent-location-container'>\r\n\t\t<div id='recent-location-nav'>\r\n\t\t\t{recentLocations.slice(0).reverse().map((location, i)=>(\r\n\t\t\t\t<Location\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tlocation={location}\r\n\t\t\t\t\tindex={i}\r\n\t\t\t\t\tdeleteRecentLocation = {deleteRecentLocation} \r\n\t\t\t\t\tselectRecentLocation = {selectRecentLocation}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t\t\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction Location({location, index, deleteRecentLocation, selectRecentLocation}){\r\n\treturn(\r\n\t\t<div className='recent-location'>\r\n\t\t\t<div className='recent-location-name' onClick={() => selectRecentLocation(location.lat, location.lon)}>\r\n\t\t\t\t{location.name}\r\n\t\t\t</div>\r\n\t\t\t<button className=\"recent-location-delete\" onClick={() => deleteRecentLocation(location)}>X</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport CurrentPanel from './components/CurrentPanel.js';\r\nimport DailyPanel from './components/DailyPanel.js';\r\nimport HourlyPanel from './components/HourlyPanel.js';\r\nimport TopNav from './components/TopNav.js';\r\nimport * as util from './util/util.js';\r\nimport Cookies from 'universal-cookie';\r\nimport RecentLocationBar from './components/RecentLocationBar.js';\r\n\r\nfunction App() {\r\n\tconst oneCallAPI_url = \"https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=current,minutely&appid={API_KEY}\"\r\n\tconst [current, setCurrent] = useState();\r\n\tconst [gotCurrent, setGotCurrent] = useState(false)\r\n\tconst [daily, setDaily] = useState();\r\n\tconst [gotDaily, setGotDaily] = useState(false);\r\n\tconst [hourly, setHourly] = useState();\r\n\tconst [gotHourly, setGotHourly] = useState();\r\n\tconst [currentWeatherAPI, setCurrentWeatherAPI] = useState('');\r\n\tconst [isCelsius, setIsCelsius] = useState(false);\r\n\tconst openWeatherAPIKey = process.env.REACT_APP_OPENWEATHERAPIKEY;\r\n\tconst convert = (isCelsius)? util.convertKelvinToC : util.convertKelvinToF;\r\n\tconst cookie = new Cookies();\r\n\tconst [recentLocations, setRecentLocations] = useState(cookie.get('recentLocations'));\r\n\r\n\tfunction handleSearch(searchKey){\r\n\t\tconst searchTerms = searchKey.split(',').map(term => term.trim());\r\n\t\tconst isZip = Number.isInteger(Number.parseInt(searchTerms[0]));\r\n\t\t//console.log(searchTerms);\r\n\t\t//console.log(`Is Zipcode: ${isZip}`);\r\n\t\tif(isZip){\r\n\t\t\tsetCurrentWeatherAPI(`https://api.openweathermap.org/data/2.5/weather?zip=${searchTerms}&appid=${openWeatherAPIKey}`);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tsetCurrentWeatherAPI(`https://api.openweathermap.org/data/2.5/weather?q=${searchTerms}&appid=${openWeatherAPIKey}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync function fetchOneCallData(lat, lon){\r\n\t\tconst url = oneCallAPI_url.replace('{lon}',lon).replace('{lat}',lat).replace('{API_KEY}',openWeatherAPIKey);\r\n\t\t\t\tfetch(url)\r\n\t\t\t\t\t.then(res=>res.json())\r\n\t\t\t\t\t.then(data1 => {\r\n\t\t\t\t\t\t//console.log(data1);\r\n\t\t\t\t\t\tsetDaily(data1.daily);\r\n\t\t\t\t\t\tsetHourly(data1.hourly);\r\n\t\t\t\t\t\tsetGotDaily(true)\r\n\t\t\t\t\t\tsetGotHourly(true);\r\n\t\t\t\t\t});\r\n\t}\r\n\r\n\t//Ask user for current location\r\n\tuseEffect(() => {\r\n\t\tnavigator.geolocation.getCurrentPosition( res => {searchByCoordinate(res.coords.latitude, res.coords.longitude)}, handleFailure);\r\n\t}, [])\r\n\r\n\t//Search for a location using coordinates\r\n\tconst searchByCoordinate = (latitude, longitude) =>{\r\n\t\tsetCurrentWeatherAPI(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${openWeatherAPIKey}`);\r\n\t\t//console.log({latitude, longitude});\r\n\t}\r\n\r\n\t//Handle when geolocation fail\r\n\tconst handleFailure = res =>{\r\n\t\t//console.log('Failed');\r\n\t\tsetCurrentWeatherAPI(`https://api.openweathermap.org/data/2.5/weather?zip=08002,us&appid=${openWeatherAPIKey}`);\r\n\t}\r\n\r\n\t//Store recently searched location using cookies\r\n\tconst addRecentLocation = (location) => {\r\n\t\tvar date = new Date();\r\n\t\tdate.setFullYear(2030);\r\n\t\t//console.log(cookie.get('recentLocations'));\r\n\t\tif(recentLocations == undefined){\r\n\t\t\tcookie.set('recentLocations', JSON.stringify([location]), {path: '/', expires: date});\r\n\t\t\tsetRecentLocations([location]);\r\n\t\t\t//console.log(recentLocations);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst filtered = recentLocations.filter((loc) => {\r\n\t\t\treturn (location.name==loc.name && Math.abs(location.lon-loc.lon)<1 && Math.abs(location.lat-loc.lat)<1);\r\n\t\t});\r\n\t\tif(filtered.length != 0) return;\r\n\r\n\t\tvar newLocations = recentLocations;\r\n\t\tnewLocations.push(location);\r\n\t\tif(newLocations.length > 6){\r\n\t\t\tnewLocations.splice(0,1);\r\n\t\t\t//console.log(\"splice\");\r\n\t\t}\r\n\t\tcookie.set('recentLocations', JSON.stringify(newLocations), {path: '/', expires: date});\r\n\t\tsetRecentLocations(newLocations);\r\n\t}\r\n\r\n\t//Delete a recently searched location from app state and cookies\r\n\tconst deleteRecentLocation = (location) => {\r\n\t\tvar date = new Date();\r\n\t\tdate.setFullYear(2030);\r\n\t\tvar newLocations = recentLocations;\r\n\t\tnewLocations = newLocations.filter((loc) => {\r\n\t\t\treturn (location.name!=loc.name || location.lon!=loc.lon || location.lat!=loc.lat);\r\n\t\t});\r\n\t\tcookie.set('recentLocations', JSON.stringify(newLocations), {path: '/', expires: date});\r\n\t\tsetRecentLocations(newLocations);\r\n\t}\r\n\r\n\t//This fetch current weather and then fetch daily and hourly weather\r\n\tuseEffect(() => {\r\n\t\t//console.log(currentWeatherAPI);\r\n\t\tif(currentWeatherAPI != ''){\r\n\t\t\tfetch(currentWeatherAPI)\r\n\t\t\t\t.then(res=> res.json())\r\n\t\t\t\t.then(data => {\r\n\t\t\t\t\tif(data.cod>='400'){\r\n\t\t\t\t\t\tthrow Error(\"Location not found\\nSearch format:\\nZipcode: #####, {country code}\\nCity Name: {city name}, {state}, {country}\\nState and country field are optional but will give better result.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetCurrent(data);\r\n\t\t\t\t\t//console.log(data);\r\n\t\t\t\t\tconst lat = data.coord.lat;\r\n\t\t\t\t\tconst lon = data.coord.lon;\r\n\t\t\t\t\taddRecentLocation({name: `${data.name}, ${data.sys.country}`, lat: lat, lon: lon});\r\n\t\t\t\t\tfetchOneCallData(lat,lon);\r\n\t\t\t\t})\r\n\t\t\t\t.then(()=>setGotCurrent(true))\r\n\t\t\t\t.catch((error)=>window.alert(error.message));\r\n\t\t}\t\r\n\t}, [currentWeatherAPI]);\r\n\r\n\treturn (\r\n    \t<div className=\"App\">\r\n\t\t\t\t<TopNav\r\n\t\t\t\t\thandleSearch={handleSearch}\r\n\t\t\t\t\tisCelsius={isCelsius}\r\n\t\t\t\t\tsetIsCelsius={setIsCelsius}\r\n\t\t\t\t/>\r\n\t\t\t\t<RecentLocationBar\r\n\t\t\t\t\trecentLocations={(recentLocations == undefined)? [] : recentLocations}\r\n\t\t\t\t\tdeleteRecentLocation={deleteRecentLocation}\r\n\t\t\t\t\tselectRecentLocation={searchByCoordinate}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className='main'>\r\n\t\t\t\t\t<CurrentPanel\r\n\t\t\t\t\t\tcurrent={current}\r\n\t\t\t\t\t\tgotCurrent={gotCurrent}\r\n\t\t\t\t\t\tconvert={convert}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<DailyPanel\r\n\t\t\t\t\t\tdaily={daily}\r\n\t\t\t\t\t\tgotDaily={gotDaily}\r\n\t\t\t\t\t\tconvert={convert}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<HourlyPanel\r\n\t\t\t\t\t\thourly={hourly}\r\n\t\t\t\t\t\tgotHourly={gotHourly}\r\n\t\t\t\t\t\tconvert={convert}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n    \t</div>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './css/App.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}